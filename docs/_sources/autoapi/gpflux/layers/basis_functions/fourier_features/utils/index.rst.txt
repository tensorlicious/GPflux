:py:mod:`gpflux.layers.basis_functions.fourier_features.utils`
==============================================================

.. py:module:: gpflux.layers.basis_functions.fourier_features.utils

.. autoapi-nested-parse::

   This module provides a set of common utilities for kernel feature decompositions.



Module Contents
---------------

.. py:data:: QFF_SUPPORTED_KERNELS
   :annotation: :Tuple[Type[gpflow.kernels.Stationary], Ellipsis]

   Kernels supported by :class:`OrthogonalRandomFeatures`.

   This random matrix sampling scheme only applies to the :class:`gpflow.kernels.SquaredExponential`
   kernel.
   For Matern kernels please use :class:`RandomFourierFeatures`
   or :class:`RandomFourierFeaturesCosine`.


.. py:data:: ORF_SUPPORTED_KERNELS
   :annotation: :Tuple[Type[gpflow.kernels.Stationary], Ellipsis]

   Kernels supported by :class:`RandomFourierFeatures`.

   You can build RFF for shift-invariant stationary kernels from which you can
   sample frequencies from their power spectrum, following Bochner's theorem.


.. py:function:: _sample_chi_squared(nu: float, shape: gpflux.types.ShapeType, dtype: gpflow.base.DType) -> gpflow.base.TensorType

   Draw samples from Chi-squared distribution with `nu` degrees of freedom.

   See https://mathworld.wolfram.com/Chi-SquaredDistribution.html for further
   details regarding relationship to Gamma distribution.


.. py:function:: _sample_chi(nu: float, shape: gpflux.types.ShapeType, dtype: gpflow.base.DType) -> gpflow.base.TensorType

   Draw samples from Chi-distribution with `nu` degrees of freedom.


.. py:function:: _sample_students_t(nu: float, shape: gpflux.types.ShapeType, dtype: gpflow.base.DType) -> gpflow.base.TensorType

   Draw samples from a (central) Student's t-distribution using the following:
     BETA ~ Gamma(nu/2, nu/2) (shape-rate parameterization)
     X ~ Normal(0, 1/BETA)
   then:
     X ~ StudentsT(nu)

   Note this is equivalent to the more commonly used parameterization
     Z ~ Chi2(nu) = Gamma(nu/2, 1/2)
     EPSILON ~ Normal(0, 1)
     X = EPSILON * sqrt(nu/Z)

   To see this, note
     Z/nu ~ Gamma(nu/2, nu/2)
   and
     X ~ Normal(0, nu/Z)
   The equivalence becomes obvious when we set BETA = Z/nu


.. py:function:: _bases_cosine(X: gpflow.base.TensorType, W: gpflow.base.TensorType, b: gpflow.base.TensorType) -> gpflow.base.TensorType

   Feature map for random Fourier features (RFF) as originally prescribed
   by Rahimi & Recht, 2007 :cite:p:`rahimi2007random`.
   See also :cite:p:`sutherland2015error` for additional details.


.. py:function:: _bases_concat(X: gpflow.base.TensorType, W: gpflow.base.TensorType) -> gpflow.base.TensorType

   Feature map for random Fourier features (RFF) as originally prescribed
   by Rahimi & Recht, 2007 :cite:p:`rahimi2007random`.
   See also :cite:p:`sutherland2015error` for additional details.


.. py:function:: _ceil_divide(a: float, b: float) -> int

   Ceiling division. Returns the smallest integer `m` s.t. `m*b >= a`.


